import { supabase } from '../lib/supabase';

/**
 * Script de remise √† z√©ro du syst√®me pour la production
 * 
 * ‚ö†Ô∏è ATTENTION: Ce script supprime d√©finitivement toutes les donn√©es d'emprunt et de maintenance !
 * 
 * Ex√©cute les op√©rations suivantes:
 * 1. Supprime tous les emprunts (checkouts)
 * 2. Supprime tous les bons de livraison (delivery_notes)
 * 3. Supprime toutes les maintenances (equipment_maintenance)
 * 4. Supprime toutes les instances d'√©quipement (equipment_instances)
 * 5. Remet tous les √©quipements en disponible (available_quantity = total_quantity, status = 'available')
 */

export interface ResetResults {
  deletedCheckouts: number;
  deletedDeliveryNotes: number;
  deletedMaintenances: number;
  deletedInstances: number;
  updatedEquipment: number;
  errors: string[];
}

export async function resetSystemForProduction(): Promise<ResetResults> {
  const results: ResetResults = {
    deletedCheckouts: 0,
    deletedDeliveryNotes: 0,
    deletedMaintenances: 0,
    deletedInstances: 0,
    updatedEquipment: 0,
    errors: []
  };

  // V√©rifier que Supabase est configur√©
  if (!supabase) {
    results.errors.push('Configuration Supabase invalide. V√©rifiez vos variables d\'environnement.');
    return results;
  }

  try {
    console.log('üöÄ D√©but de la remise √† z√©ro du syst√®me...');

    // 1. Compter et supprimer tous les emprunts (checkouts)
    console.log('üìù Suppression des emprunts...');
    const { count: checkoutsCount } = await supabase
      .from('checkouts')
      .select('*', { count: 'exact', head: true });
    
    const { error: checkoutsError } = await supabase
      .from('checkouts')
      .delete()
      .neq('id', '00000000-0000-0000-0000-000000000000'); // Supprime tout

    if (checkoutsError) {
      results.errors.push(`Erreur lors de la suppression des emprunts: ${checkoutsError.message}`);
    } else {
      results.deletedCheckouts = checkoutsCount || 0;
      console.log(`‚úÖ ${results.deletedCheckouts} emprunts supprim√©s`);
    }

    // 2. Compter et supprimer tous les bons de livraison (delivery_notes)
    console.log('üì¶ Suppression des bons de livraison...');
    const { count: deliveryCount } = await supabase
      .from('delivery_notes')
      .select('*', { count: 'exact', head: true });
    
    const { error: deliveryError } = await supabase
      .from('delivery_notes')
      .delete()
      .neq('id', '00000000-0000-0000-0000-000000000000'); // Supprime tout

    if (deliveryError) {
      results.errors.push(`Erreur lors de la suppression des bons: ${deliveryError.message}`);
    } else {
      results.deletedDeliveryNotes = deliveryCount || 0;
      console.log(`‚úÖ ${results.deletedDeliveryNotes} bons de livraison supprim√©s`);
    }

    // 3. Compter et supprimer toutes les maintenances (equipment_maintenance)
    console.log('üîß Suppression des maintenances...');
    const { count: maintenanceCount } = await supabase
      .from('equipment_maintenance')
      .select('*', { count: 'exact', head: true });
    
    const { error: maintenanceError } = await supabase
      .from('equipment_maintenance')
      .delete()
      .neq('id', '00000000-0000-0000-0000-000000000000'); // Supprime tout

    if (maintenanceError) {
      results.errors.push(`Erreur lors de la suppression des maintenances: ${maintenanceError.message}`);
    } else {
      results.deletedMaintenances = maintenanceCount || 0;
      console.log(`‚úÖ ${results.deletedMaintenances} maintenances supprim√©es`);
    }

    // 4. Compter et supprimer toutes les instances d'√©quipement (equipment_instances)
    console.log('üè∑Ô∏è Suppression des instances d\'√©quipement...');
    const { count: instancesCount } = await supabase
      .from('equipment_instances')
      .select('*', { count: 'exact', head: true });
    
    const { error: instancesError } = await supabase
      .from('equipment_instances')
      .delete()
      .neq('id', '00000000-0000-0000-0000-000000000000'); // Supprime tout

    if (instancesError) {
      results.errors.push(`Erreur lors de la suppression des instances: ${instancesError.message}`);
    } else {
      results.deletedInstances = instancesCount || 0;
      console.log(`‚úÖ ${results.deletedInstances} instances d'√©quipement supprim√©es`);
    }

    // 5. Remettre tous les √©quipements en disponible
    console.log('üì¶ Remise en disponibilit√© de tout le mat√©riel...');
    
    // D'abord, r√©cup√©rer tous les √©quipements pour conna√Ætre le nombre
    const { data: allEquipment, error: countError } = await supabase
      .from('equipment')
      .select('id, total_quantity');

    if (countError) {
      results.errors.push(`Erreur lors de la lecture des √©quipements: ${countError.message}`);
    } else {
      // Mettre √† jour chaque √©quipement individuellement pour √©viter les probl√®mes SQL
      for (const equipment of allEquipment || []) {
        const { error: updateError } = await supabase
          .from('equipment')
          .update({
            status: 'available',
            available_quantity: equipment.total_quantity,
            last_maintenance: null
          })
          .eq('id', equipment.id);

        if (updateError) {
          results.errors.push(`Erreur lors de la mise √† jour de l'√©quipement ${equipment.id}: ${updateError.message}`);
        }
      }
      
      results.updatedEquipment = allEquipment?.length || 0;
      console.log(`‚úÖ ${results.updatedEquipment} √©quipements remis en disponible`);
    }

    // 6. Ajouter un marqueur de date de remise √† z√©ro
    console.log('üìÖ Ajout du marqueur de remise √† z√©ro...');
    const { error: settingError } = await supabase
      .from('system_settings')
      .upsert({
        id: 'system_reset_date',
        value: new Date().toISOString(),
        description: 'Date de remise √† z√©ro du syst√®me pour la production'
      });

    if (settingError) {
      results.errors.push(`Erreur lors de l'ajout du marqueur: ${settingError.message}`);
    } else {
      console.log('‚úÖ Marqueur de remise √† z√©ro ajout√©');
    }

    console.log('üéâ Remise √† z√©ro termin√©e !');
    
    return results;

  } catch (error: unknown) {
    const errorMessage = error instanceof Error ? error.message : 'Erreur inconnue';
    console.error('‚ùå Erreur fatale lors de la remise √† z√©ro:', error);
    results.errors.push(`Erreur fatale: ${errorMessage}`);
    return results;
  }
}

// Fonction utilitaire pour afficher un rapport d√©taill√©
export function displayResetReport(results: ResetResults): void {
  console.log('\n========== RAPPORT DE REMISE √Ä Z√âRO ==========');
  console.log(`Emprunts supprim√©s: ${results.deletedCheckouts}`);
  console.log(`Bons de livraison supprim√©s: ${results.deletedDeliveryNotes}`);
  console.log(`Maintenances supprim√©es: ${results.deletedMaintenances}`);
  console.log(`Instances d'√©quipement supprim√©es: ${results.deletedInstances}`);
  console.log(`√âquipements remis en disponible: ${results.updatedEquipment}`);
  
  if (results.errors.length > 0) {
    console.log('\n‚ö†Ô∏è ERREURS RENCONTR√âES:');
    results.errors.forEach((error, index) => {
      console.log(`${index + 1}. ${error}`);
    });
  } else {
    console.log('\n‚úÖ Aucune erreur - Remise √† z√©ro r√©ussie !');
  }
  console.log('=============================================\n');
} 